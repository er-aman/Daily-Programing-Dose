Given a binary tree, check whether it is a mirror of itself ie, symmetric around its center.

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
 

But the following [1,2,2,null,3,null,3] is not:

    1
   / \
  2   2
   \   \
   3    3
   
  
  
 *****************************************************************SOLUTION****************************************************
 
 
 # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def search(self, p, q):
        if not p and not q:
            return True
        if not p or not q or p.val !=q.val:
            return False
        return self.search(p.left, q.right) and self.search(p.right, q.left)
    def isSymmetric(self, root: TreeNode) -> bool:
        return self.search(root.left, root.right) if root else True
                
