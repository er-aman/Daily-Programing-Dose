Given two lists Aand B, and B is an anagram of A. B is an anagram of A means B is made by randomizing the order of the elements in A.

We want to find an index mapping P, from A to B. A mapping P[i] = j means the ith element in A appears in B at index j.

These lists A and B may contain duplicates. If there are multiple answers, output any of them.

For example, given

A = [12, 28, 46, 32, 50]
B = [50, 12, 32, 46, 28]
We should return
[1, 4, 3, 2, 0]

Time complexity and the space complexity is o(n)
***********************************************************Solution*********************************************************************
class Solution:
    def anagramMappings(self, A:List[int], B:List[int]) -> List[int]:
        """First keep the record of key value pairs of list B in dictionary """
        temp_dict = {x:i for i,x in enumerate(B)}
        # get the element from the list A and check for the index of the element 
        # as value of key in the dictionary
        return [temp_dict[i] for i in A]
