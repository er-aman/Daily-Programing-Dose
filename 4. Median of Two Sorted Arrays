There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5

********************************************************SOLUTION********************************************************************
Time Complexity : O(log(min(m,n)))
Space Complexity : O(1)

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        m,n = len(nums1), len(nums2)
        if m>n:
            nums1,nums2,m,n = nums2,nums1,n,m
        start=0
        end =m
        total = (m+n+1)//2
        even = ((m+n)%2)==0
        while start<=end:
            part_x= (start + end)//2
            part_y = total - part_x
            
            maxLeftx = float("-inf") if part_x==0 else nums1[part_x-1]
            minRightx= float("inf ") if part_x ==m else nums1[part_x]
            
            maxLefty = float("-inf") if part_y==0 else nums2[part_y-1]
            minRighty= float("inf ") if part_y ==n else nums2[part_y]
            
            if maxLeftx <= minRighty and maxLefty<=minRightx:
                if not even:
                    return max(maxLeftx,maxLefty)
                else:
                    return (max(maxLeftx,maxLefty) + min(minRightx,minRighty))/2
            elif maxLeftx> minRighty:
                end = part_x-1
            else:
                start = part_x +1
