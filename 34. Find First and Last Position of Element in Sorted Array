Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]


**************************************************SOLUTION*********************************************************************
Time :O(logn)

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        def search(n):
            l,r = 0, len(nums)
            while l<r:
                mid = (l+r)//2
                if nums[mid]>=n:
                    r=mid
                else:
                    l=mid+1
            return l
        lo = search(target)
        return [lo, search(target+1)-1] if target in nums[lo:lo+1] else [-1,-1]
