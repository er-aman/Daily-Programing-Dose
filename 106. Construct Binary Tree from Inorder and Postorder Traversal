Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]

Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7



*********************************************************SOLUTION******************************************************************

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:
        
        def helper(in_left,in_right):
            if in_left>in_right:
                return None
            val = postorder.pop()
            root = TreeNode(val)
            index = id_mapper[val]
            root.right = helper(index+1,in_right)
            root.left = helper(in_left, index-1)
            return root
        # get the dictionary of the inorder  
        id_mapper = {vals:ids for ids,vals in enumerate(inorder)}
        return helper(0, len(inorder)-1)
        
   
