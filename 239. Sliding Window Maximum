Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Follow up:
Could you solve it in linear time?

Example:

Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7] 
Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
 
 
 class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        # if not nums:
        #     return 0
        # i=0
        # res=[]
        # while (i+k) <=len(nums):
        #     final_max = max(nums[i:i+k])
        #     res.append(final_max)
        #     i+=1
        # return res
        
        """An efficient dynamic prog """
        n= len(nums)
        if n* k ==0:
            return []
        
        left =[0]* n 
        left[0]=nums[0]
        right =[0]*n
        right[n-1]=nums[n-1]
        
        for i in range(1,n):
            if i%k ==0:
                left[i]=nums[i]
            else:
                left[i]= max(left[i-1],nums[i])
            
            j=n-i-1
            if (j+1)%k==0:
                right[j]= nums[j]
            else:
                right[j]= max(right[j+1],nums[j])
        output=[]
        for i in range(n-k+1):
            output.append(max(right[i],left[i+k-1]))
        return output
