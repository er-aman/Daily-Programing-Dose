Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
   
   
   **********************************************SOLUTION**********************************************************************
   Time Complexity : O(n)
   Space Complexity: O(n)
   
   # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        if not preorder:
            return None
        preorder_iter = iter(preorder)
        lookup = {j:i for i,j in enumerate(inorder)}
        
        def helper(start,end):
            if start> end: 
                return None
            root_val = next(preorder_iter)
            root = TreeNode(root_val)
            root.left = helper(start,lookup[root_val]-1)
            root.right = helper(lookup[root_val]+1, end)
            
            return root
        return helper(0,len(inorder)-1)
