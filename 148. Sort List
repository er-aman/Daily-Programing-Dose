Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5

***************************************************SOLUTION********************************************************************************

Time Complexity: O(nlogn)
Space Complexity:O(n)

# Defination of singly linked list.
# class ListNode:
#     def ___init__(slelf,x):
#         self.val = x
#         self.next =None

class Solution:
    def sortList(self, head: ListNode):
        if not head:
            return None 
        A=[]
        p=q=head
        while p!=None:
            A.append(p.val)
            p=p.next
        A= sorted(A)
        i=0
        p=q
        while p!=None:
            p.val = A[i]
            i+=1
            p=p.next
        return head
        
