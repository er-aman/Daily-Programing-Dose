Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Example 1:

Input: num1 = "2", num2 = "3"
Output: "6"
Example 2:

Input: num1 = "123", num2 = "456"
Output: "56088"
Note:

The length of both num1 and num2 is < 110.
Both num1 and num2 contain only digits 0-9.
Both num1 and num2 do not contain any leading zero, except the number 0 itself.
You must not use any built-in BigInteger library or convert the inputs to integer directly

**************************************************************************SOLUTION*********************************************
class Solution:
    def multiply(self, num1: str, num2: str) -> str:
        res = [0] * (len(num1)+len(num2))
        for i, val in enumerate(reversed(num1)):
            for j, val2 in enumerate(reversed(num2)):
                item1 = ord(val)-ord('0')
                item2 = ord(val2)-ord('0')
                res[i+j]+= item1*item2
                res[i+j+1] += res[i+j]//10
                res[i+j] %=10
            
        while len(res)>1 and res[-1]==0:
            res.pop()
        
        return ''.join(str(item) for item in res[::-1])
