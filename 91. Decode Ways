A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.

Example 1:

Input: "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).
Example 2:

Input: "226"
Output: 3
Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).


************************************SOL*********************************************************

"Time and space complexity is O(n)"
class Solution:
    def __init__(self):
        self.memo ={}
    
    def recursiveStr(self,index,s):
        if index == len(s):
            return 1
        if s[index] == '0':
            return 0 
        if index == len(s)-1:
            return 1 
        
        if index in self.memo:
            return self.memo[index]
        
        ans = self.recursiveStr(index+1,s)+ (self.recursiveStr(index+2,s) if (int(s[index:index+2])<=26) else 0)
        self.memo[index]=ans 
        return ans
    
        
    def numDecodings(self, s: str) -> int:
        if not s:
            return 0
        return self.recursiveStr(0,s)
