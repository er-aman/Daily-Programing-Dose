Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

return its level order traversal as:

[
  [3],
  [9,20],
  [15,7]
]

**************************************************SOLUTION**************************************************************************

 Defination of TreeNode
# class TreeNode:
#   def __init__(self,x):
#       self.val = x
#       self.left = None
#       self.right = None
from collections import deque
class Solution:
    def levelOrder(self, root: TreeNode):
        if not root:
            return
        
        queue,result = deque([root,]),[]
        while queue:
            sublist,levelNum = [],len(queue)
            for i in range(levelNum):
                node = queue.popleft()
                sublist.append(node.val)
                
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
                
            result.append(sublist)
        return result
