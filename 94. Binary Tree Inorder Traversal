Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]


*****************************************************SOLUTION********************************************************************

Time Complexity: O(n)

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        result,stack = [],[(root,False)]
        
        while stack:
            root,is_visited = stack.pop()
            if root is None:
                continue
            if is_visited:
                result.append(root.val)
            else:
                stack.append((root.right,False))
                stack.append((root,True))
                stack.append((root.left,False))
        return result
#     if root==None:
#             return []

#         left_list = self.inorderTraversal(root.left)
#         right_list = self.inorderTraversal(root.right)
#         return left_list + [root.val] + right_list 
    
#         if root is not None:
#             nodes =[]
#             node= root
#             out=[] 
#             while node:
#                 nodes.append(node)
#                 node=node.left
            
#             node = nodes.pop()
#             out.append(node.val)
#             node = node.right
        
#         return out
                
