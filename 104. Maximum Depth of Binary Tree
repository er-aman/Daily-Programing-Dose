Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its depth = 3.

************************************************SOLTUTION***************************************************
Time Complexity: O(n)
Space Complexity is O(log n)

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if root is None:
            return 0
        else:
            left_ht = self.maxDepth(root.left)
            right_ht = self.maxDepth(root.right)
            return max(left_ht,right_ht) + 1
            
            
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        stack =[]
        depth =0
        if root is not None:
            stack.append((1,root))
        while stack!=[]:
            cur_depth,root = stack.pop()
            if root is not None:
                depth = max(depth,cur_depth)
                stack.append((cur_depth+1,root.left))
                stack.append((cur_depth+1,root.right))
        return depth
