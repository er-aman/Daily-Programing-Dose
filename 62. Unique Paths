A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?

Example 1:

Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Right -> Down
2. Right -> Down -> Right
3. Down -> Right -> Right
Example 2:

Input: m = 7, n = 3
Output: 28

****************************************************************SOLUTION********************************************************************
So here we are given a grid a matrix and from the starting position we need to go to the end point. So for 
example in the given example the grid is 3x2 so the grid is of the form  0 0 
                                                                         0 0 
                                                                         0 0 
now as the condtion is that the robot can either move down or right the one step so in the first row or first column 
the robot can move one one unit and for all other diagonal places we need to compute the possible paths it can take
so the 3 x 2 gird robot starting from initial point can reach the bottom right cornor as 1 1  here mat[1][1] = mat[0][1]+mat[1][0]
                                                                                         1 2
                                                                                         1 3
so this way we compute all the diagonal elements and on reaching the last we find the possible unique paths that it can take.

So the general formula for computing the paths can be obtained from the above equation.
mat[i][j] = mat[i-1][j] + mat[i][j-1] and we will return the mat[m-1][n-1] value to get the unique paths.

Time complexity is O(m*n) and space O(m*n)
class Solution:
    def uniquePaths(self, m:int, n:int):
        # lets make a matrix of 0s for m x n
        
        mat = [[0] * n for _ in range(m)]
        
        # now assign the values to the particular indices
        
        for i in range(m):
            for j in range(n):
                mat[i][j] = max(mat[i-1][j]+mat[i][j-1],1)
        return mat[m-1][n-1]
        
 
 Since it is a combinatorics of m+n-2 C n-1 thus it can be computed in O(1) as well:
 
from functools import reduce
class Solution:
    def uniquePaths(self, m:int, n:int):
        return int(reduce(lambda x,y: x and x/y or y, map(math.factorial,(m+n-2,m-1,n-1))))
 
or we can use simple factorial as well

class Solution:
    def uniquePaths(self, m:int, n:int):
        return math.factorial(m+n-2)// math.factorial(n-1)// math.factorial(m-1)
