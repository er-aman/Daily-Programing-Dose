Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4



***************************************solution************************************************************************************** 

# For implementing this i would use the orderedQueue which will keep the track of which
# key was inserted when and we will then get that thing done

import collections
import unittest
class LRU:
  
  def __init__(self,capacity):
    self.capacity= capacity
    self.head=collections.defaultdict(int)
    
  def get(self,key):
    if key not in self.head:
      return -1
    self.head[key] = self.head.pop(key)
    return self.head[key]
  def put(self,key,value):
    self.head.pop(key,None)
    if len(self.head)> self.capacity:
      self.head.popitem(last=False)
    self.head[key]=value
  

class Test(unittest.TestCase):
  def test_get_key(self):
    lru =LRU(4)
    actual = lru.get("1")
    expected = -1
    self.assertEqual(actual,expected)
  def test_get_key2(self):
    lru= LRU(4)
    lru.put("1","Aman")
    actual = lru.get("1")
    expected = "Aman"
    self.assertEqual(actual,expected)
unittest.main(verbosity=2)
