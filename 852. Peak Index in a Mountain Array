Let's call an array A a mountain if the following properties hold:

A.length >= 3
There exists some 0 < i < A.length - 1 such that A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1]
Given an array that is definitely a mountain, return any i such that A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1].

Example 1:

Input: [0,1,0]
Output: 1
Example 2:

Input: [0,2,1,0]
Output: 1

**************************************************SOLUTION*********************************************************************

Liear Approach with time complexity is O(n) and space Complexity is O(1)

class Solution:
    def peakIndexInMountainArray(self, A: List[int]) -> int:
        for i in range(len(A)):
            if A[i]>A[i+1]:
                return i
 
Binary Search Solution:
Time O(log n)
Space O(1)

class Solution:
    def peakIndexInMountainArray(self, A: List[int]) -> int:
        l,r = 0, len(A)-1
        while l<r:
            mid = (l+r)//2
            if A[mid]< A[mid+1]:
                l = mid+1
            else:
                r = mid
        return l
