Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

Example:

Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
   
   ***********************************************SOLUTION********************************************************
   Time Complexity is O(n)
   Space : O(1)
   
   class Solution:
    def numTrees(self, n: int) -> int:
        p= 2*n
        q=n 
        def fact(x):
            res =1 
            for i in range(2,x+1):
                res *=i
            return res
        res = fact(p) / (fact(q)*fact(q))
        res = res/(q+1)
        return int(res) 
